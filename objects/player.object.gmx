<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>w0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = 1.6;
xSpeed = 0;
ySpeed = 0;
jSpeed = 14;
mSpeed = 4;
wJumpingRight = false;
wJumpingLeft = false;
alarm1=-1;
alarm2=-1;
alarm3=-1;

s = false
inWater = false;
inAir = true;

//window_set_fullscreen(true);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed </string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>.25</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(place_meeting(x,y,water) or place_meeting(x,y,object47)){
    grav = .4;
    jSpeed = 6;
    if(place_meeting(x,y,topWater) and s == false){
        war = instance_nearest(x,y,water)
        instance_create(war.x+32,war.y,object0)
        s = true;
    }
    if(place_meeting(x,y,object47) and !place_meeting(x,y,topWater)){
        s = false;
    }
    if(place_meeting(x,y,topWater) and !place_meeting(x,y,water)){
        s = false
    }
    inWater = true
    inAir = false
    
}
if(!(place_meeting(x,y,water) or place_meeting(x,y,object47))){
    grav = 1.6;
    jSpeed = 14
    
    s= false
    inWater = false
    inAir = true
    
}
keyRight = keyboard_check(vk_right);
keyLeft = keyboard_check(vk_left);
keyJump = keyboard_check_pressed(vk_space);
jumpHeld = keyboard_check(vk_space);

if(keyboard_check_pressed(vk_right))
{
    keyRight = true;
    keyLeft = false;
}
if(keyboard_check_pressed(vk_left))
{
    keyLeft = true;
    keyRight = false;
}

change = keyRight-keyLeft;
xSpeed = change*mSpeed;
if(keyboard_check_released(vk_right)) 
{
    //show_debug_message("a");
    if(!keyLeft) 
    {
        
        //show_debug_message("b");
        alarm3 = .05*room_speed;
        if(!wJumpingRight and !wJumpingLeft){
            sprite_index = w0;
            image_speed = .25;
        }
    }
}
if(keyboard_check_released(vk_left)) 
{
    //show_debug_message("a");
    if(!keyRight) 
    {
        //show_debug_message("b");
        alarm3 = .05*room_speed;
        if(!wJumpingRight and !wJumpingLeft){
            sprite_index = sprite43;
            image_speed = .25;
        }
    }
}
/*
if(keyboard_check_released(vk_right)) 
{
    if(wJumpingRight == false and wJumpingLeft == false)
    {
        alarm3 = .05*room_speed;
    
        sprite_index = w0;
    }
    
}
if(keyboard_check_released(vk_left)) 
{
    if(wJumpingRight == false and wJumpingLeft == false)
    {
        alarm3 = .05*room_speed;
    
        sprite_index = w5;
    }
    
    
}
*/
//show_debug_message(alarm3);

if(wJumpingRight == true and alarm1 = -1 and ySpeed &gt; 0)
{
    sprite_index = wjump1;
    if(keyLeft and alarm1 == -1) 
    {
        
        alarm1 = room_speed*.5-.5;
    }
    ySpeed = .3;
}
if(wJumpingLeft == true and alarm2 = -1 and ySpeed &gt; 0)
{
    show_debug_message("b");
    sprite_index = wjump0;
    
    if(keyRight)
    {
        alarm3=-1;
        show_debug_message("a");
        alarm2 = room_speed*.3-.5;
        
    }
    ySpeed = .3;
}

if(alarm3&gt;-1 and alarm3&lt;0)
{
    //game_end();
    //exit;
    //show_debug_message("bbbbbbbbbbbbbbb");
    alarm2 = -1;
    alarm1 = -1;
    wJumpingRight = false;
    wJumpingLeft = false;
}
if(alarm1 == 0) 
{
    show_debug_message("here");
    xSpeed = -mSpeed;
    wJumpingRight = false;
}
if(alarm2 == 0) 
{
    show_debug_message("here");
    xSpeed = mSpeed;
    wJumpingLeft = false;
}

if(grav==.4 and keyJump and (!place_meeting(x,y,topWater) or place_meeting(x,y,water))){
    wJumpingRight = false;
    wJumpingLeft = false;
        
    ySpeed = keyJump * -jSpeed;
}
    
if (place_meeting(x,y+1,platform0) or place_meeting(x+xSpeed,y,platform0) or wJumpingRight or wJumpingLeft)
{
    if(keyJump) 
    {
        wJumpingRight = false;
        wJumpingLeft = false;
        
        ySpeed = keyJump * -jSpeed;
        
        
    }
}
if(!jumpHeld)
{
    if(place_meeting(x+xSpeed,y,platform0))
    {
        ySpeed+=grav;
    }
    else if(ySpeed &lt; 10) ySpeed += grav;
}
if(jumpHeld)
{
    if(place_meeting(x+xSpeed,y,platform0))
    {
        ySpeed+=grav;
    }
    
    else if(ySpeed &lt; 0)
    {
        if(ySpeed &lt; 10) ySpeed += grav/3;
    }
    else ySpeed+=grav;
}
if (xSpeed &gt; 0 and !place_meeting(x+sign(xSpeed),y,platform0) and wJumpingRight == false and wJumpingLeft == false)
{
    image_speed = 5;
    sprite_index = wRight;
}
if (xSpeed &lt; 0 and !place_meeting(x+sign(xSpeed),y,platform0) and wJumpingLeft == false and wJumpingRight == false)
{
    image_speed = 5;
    sprite_index = wLeft;
}
if(place_meeting(x,y,platform0)){
    y-=1;
}
if (place_meeting(x+xSpeed,y,platform0))
{
    while(!place_meeting(x+sign(xSpeed),y,platform0))
    {
        x+= sign(xSpeed);
        
    }
    xSpeed = 0
    if(sprite_index = wLeft){
        sprite_index = sprite43;
        image_speed = .25;
    }
    if(sprite_index = wRight) sprite_index = w0;
    if(ySpeed &gt; 0) 
    {
        ySpeed = .6;
        
        if(keyRight) wJumpingRight = true;
        if(keyLeft) 
        {
            wJumpingLeft = true;
            
        }
        if (!place_meeting(x,y+1,platform0))
        {
            if(keyRight) sprite_index = wjump1;
            if(keyLeft) sprite_index = wjump0;
        }
    }
}

if(wJumpingRight == false and wJumpingLeft == false) x+=xSpeed;

if (place_meeting(x,y+ySpeed, platform0))
{
    wJumpingRight = false;
    wJumpingLeft = false;
    while(!place_meeting(x,y+sign(ySpeed),platform0))
    {
        y += sign(ySpeed);
    }
    ySpeed = 0;
}
y+=ySpeed;


if(ySpeed &lt; 0)
{
    if ((sprite_index == w0)or(sprite_index == wRight)) sprite_index = jump0;
    if ((sprite_index == sprite43)or(sprite_index == wLeft)) sprite_index = sprite45;
}
if(ySpeed &gt; 0)
{
    
    if ((sprite_index == jump0)or(sprite_index == wRight)) sprite_index = jump1;
    if ((sprite_index == sprite45)or(sprite_index == wLeft)) sprite_index = sprite46;
}
if(ySpeed &gt; 0)
{
    
    if ((sprite_index == w0)or(sprite_index == wRight)) sprite_index = jump1;
    if ((sprite_index == sprite43)or(sprite_index == wLeft)) sprite_index = sprite46;
}

if(ySpeed == 0 and place_meeting(x,y+1,platform0))
{
    if(sprite_index == jump1){
        sprite_index = w0;
        image_speed = .25
    }
    if(sprite_index == sprite45){
        sprite_index = sprite43
        image_speed=.25;
    }
}

if(ySpeed == 0 and !place_meeting(x,y+1,platform0))
{
    if(sprite_index == wRight) sprite_index = jump0;
    if(sprite_index == wLeft) sprite_index = sprite45;
}
if(alarm1 &gt; -1) alarm1-=1;
if(alarm2 &gt; -1) alarm2-=1;
if(alarm3 &gt; -1) alarm3-=1;
if(wJumpingRight or wJumpingLeft) ySpeed = .3;

if(ySpeed &gt; 0 and !jumpHeld and grav == 1.6) ySpeed +=grav

if(grav == .4 and ySpeed &gt; 5){
    ySpeed = 5
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_position(x,y,water) and played = false //Check if collided and if sound has been played.
{
audio_play_sound(snd_Sea, 1, false); //Play the sound
played = true
} //Make sure it does not loop
else if played = true
{played = false} //Make sure it plays again if there is another collision.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
